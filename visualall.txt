-- Sistema de Sincronización de Efectos Visuales
-- Este script permite que todos los jugadores vean los efectos visuales que un jugador crea
-- Funciona como un LocalScript que replica efectos como si fuera un ServerScript

-- Servicios necesarios
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")

-- Variables locales
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local remoteEvent = nil

-- Crear el RemoteEvent para sincronización si somos el servidor
if RunService:IsServer() then
    remoteEvent = Instance.new("RemoteEvent")
    remoteEvent.Name = "VisualEffectSync"
    remoteEvent.Parent = ReplicatedStorage
else
    -- Esperar a que el RemoteEvent esté disponible
    remoteEvent = ReplicatedStorage:WaitForChild("VisualEffectSync")
end

-- Estructura para la sincronización de efectos
local EffectSynchronizer = {}

-- Función para cambiar el Skybox
function EffectSynchronizer:ChangeSkybox(skyboxInfo)
    if RunService:IsClient() then
        -- Cliente envía la solicitud para cambiar el skybox
        remoteEvent:FireServer("Skybox", skyboxInfo)
    else
        -- Servidor procesa el cambio de skybox y notifica a todos
        local sky = Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", Lighting)
        
        -- Aplicar propiedades del skybox
        for property, value in pairs(skyboxInfo) do
            sky[property] = value
        end
        
        -- Replicar a todos los clientes
        remoteEvent:FireAllClients("Skybox", skyboxInfo)
    end
end

-- Función para crear partículas
function EffectSynchronizer:CreateParticles(particleInfo)
    if RunService:IsClient() then
        -- Cliente envía la solicitud para crear partículas
        remoteEvent:FireServer("Particles", particleInfo)
    else
        -- Servidor procesa la creación de partículas y notifica a todos
        local emitter = Instance.new("ParticleEmitter")
        
        -- Aplicar propiedades de las partículas
        for property, value in pairs(particleInfo.Properties) do
            emitter[property] = value
        end
        
        -- Establecer el padre del emisor de partículas
        if particleInfo.Parent == "Character" then
            -- Buscar el jugador que solicitó la creación
            local targetPlayer = Players:FindFirstChild(particleInfo.PlayerName)
            if targetPlayer and targetPlayer.Character then
                local targetPart = targetPlayer.Character:FindFirstChild(particleInfo.PartName)
                if targetPart then
                    emitter.Parent = targetPart
                end
            end
        elseif particleInfo.Position then
            -- Crear una parte para las partículas en el mundo
            local part = Instance.new("Part")
            part.Anchored = true
            part.CanCollide = false
            part.Transparency = 1
            part.Position = particleInfo.Position
            part.Parent = workspace
            emitter.Parent = part
            
            -- Configurar autodestrucción si es necesario
            if particleInfo.Duration then
                task.delay(particleInfo.Duration, function()
                    part:Destroy()
                end)
            end
        end
        
        -- Replicar a todos los clientes
        remoteEvent:FireAllClients("Particles", particleInfo)
    end
end

-- Función para crear decals
function EffectSynchronizer:CreateDecal(decalInfo)
    if RunService:IsClient() then
        -- Cliente envía la solicitud para crear decal
        remoteEvent:FireServer("Decal", decalInfo)
    else
        -- Servidor procesa la creación del decal y notifica a todos
        local decal = Instance.new("Decal")
        
        -- Aplicar propiedades del decal
        for property, value in pairs(decalInfo.Properties) do
            decal[property] = value
        end
        
        -- Establecer el padre del decal
        if decalInfo.Parent == "Character" then
            -- Buscar el jugador que solicitó la creación
            local targetPlayer = Players:FindFirstChild(decalInfo.PlayerName)
            if targetPlayer and targetPlayer.Character then
                local targetPart = targetPlayer.Character:FindFirstChild(decalInfo.PartName)
                if targetPart then
                    decal.Parent = targetPart
                end
            end
        elseif decalInfo.SurfaceId then
            -- Buscar la superficie por ID
            local surface = workspace:FindFirstChild(decalInfo.SurfaceId)
            if surface then
                decal.Parent = surface
            end
        end
        
        -- Replicar a todos los clientes
        remoteEvent:FireAllClients("Decal", decalInfo)
    end
end

-- Función para crear efectos de spam (varios objetos repetidos)
function EffectSynchronizer:CreateSpamEffect(spamInfo)
    if RunService:IsClient() then
        -- Cliente envía la solicitud para crear efecto de spam
        remoteEvent:FireServer("Spam", spamInfo)
    else
        -- Servidor procesa la creación del efecto de spam y notifica a todos
        local objects = {}
        
        -- Crear los objetos de spam
        for i = 1, spamInfo.Count do
            local spamObject = Instance.new(spamInfo.ObjectType)
            
            -- Aplicar propiedades comunes
            for property, value in pairs(spamInfo.Properties) do
                spamObject[property] = value
            end
            
            -- Aplicar posición y otras propiedades específicas
            if spamInfo.RandomPosition then
                local randomOffset = Vector3.new(
                    math.random(-spamInfo.Range, spamInfo.Range),
                    math.random(-spamInfo.Range, spamInfo.Range),
                    math.random(-spamInfo.Range, spamInfo.Range)
                )
                spamObject.Position = spamInfo.BasePosition + randomOffset
            end
            
            spamObject.Parent = workspace
            table.insert(objects, spamObject)
        end
        
        -- Configurar autodestrucción si es necesario
        if spamInfo.Duration then
            task.delay(spamInfo.Duration, function()
                for _, obj in ipairs(objects) do
                    obj:Destroy()
                end
            end)
        end
        
        -- Replicar a todos los clientes
        remoteEvent:FireAllClients("Spam", spamInfo)
    end
end

-- Configurar la recepción de eventos desde el servidor (para clientes)
if RunService:IsClient() then
    remoteEvent.OnClientEvent:Connect(function(effectType, effectInfo)
        if effectType == "Skybox" then
            local sky = Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", Lighting)
            for property, value in pairs(effectInfo) do
                sky[property] = value
            end
        elseif effectType == "Particles" then
            -- Implementar lógica para crear partículas en el cliente
            -- Similar a la del servidor pero sin replicación
        elseif effectType == "Decal" then
            -- Implementar lógica para crear decals en el cliente
            -- Similar a la del servidor pero sin replicación
        elseif effectType == "Spam" then
            -- Implementar lógica para crear efectos de spam en el cliente
            -- Similar a la del servidor pero sin replicación
        end
    end)
end

-- Configurar la recepción de eventos desde los clientes (para servidor)
if RunService:IsServer() then
    remoteEvent.OnServerEvent:Connect(function(client, effectType, effectInfo)
        if effectType == "Skybox" then
            EffectSynchronizer:ChangeSkybox(effectInfo)
        elseif effectType == "Particles" then
            EffectSynchronizer:CreateParticles(effectInfo)
        elseif effectType == "Decal" then
            EffectSynchronizer:CreateDecal(effectInfo)
        elseif effectType == "Spam" then
            EffectSynchronizer:CreateSpamEffect(effectInfo)
        end
    end)
end

-- Exportar la API para su uso
return EffectSynchronizer
